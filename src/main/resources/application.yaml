constants:
  file:
    upload-directory: D:/ParkDoheum/2025/2025-04-msa/upload/greengram_profile
    profile-pic: /profile
  jwt:
    issuer: green@green.com
    schema: Bearer
    bearer-format: JWT

    claim-key: signedUser
    header-key: Authorization
    secret-key: DaeguGreenArtAcademyClass502RoomForJavaSpringBootFighting

    access-token-cookie-name: access-token
    access-token-cookie-path: /
    access-token-cookie-validity-seconds: 900 # 15 mins (s): 60 * 15
    access-token-validity-milliseconds: 900_000 # 15 mins (ms): 60 * 15 * 1000

    refresh-token-cookie-name: refresh-token
    refresh-token-cookie-path: /greengram-api/api/user/reissue
    refresh-token-cookie-validity-seconds: 1_296_000 # 15 days (s): 60 * 60 * 24 * 15
    refresh-token-validity-milliseconds: 1_296_000_000 # 15 days (ms): 60 * 60 * 24 * 15 * 1000
  oauth2:
    base-uri: /oauth2/authorization #FE 소셜로그인 요청할 때 사용할 주소값
    # 플랫폼과 통신을 3번 정도 하는데 각 통신들이 하나의 작업을 위한 트랜잭션이라는 것을
    # 연결시키기 위해 쿠키를 사용한다.
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    redirection-baseUri: /*/oauth2/code/*
    cookie-expiry-seconds: 180
    authorized-redirect-uris:
      - http://localhost:5173/fe/redirect
      - http://112.222.157.157:5174/fe/redirect

eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8888/eureka

server:
  port: 8081
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  application:
    name: greengram-user
  datasource:
    url: jdbc:log4jdbc:mariadb://localhost/greengram_user
    username: root
    password: green502
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
  jackson:
    default-property-inclusion: non_null #응답 JSON을 만들 때 null인 속성은 제외한다.
    deserialization:
      fail-on-unknown-properties: false
  jpa:
    database: mysql
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          batch_size: 50
        format_sql: true
        order_updates: true

  security:
    oauth2:
      client:
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize #카카오 인가코드 요청 URL
            token-uri: https://kauth.kakao.com/oauth/token #토큰(JWT) 받을 때 사용하는 URL
            user-info-uri: https://kapi.kakao.com/v2/user/me #유저 정보 얻을 때 사용하는 URL
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
        registration:
          google:
            client-id: abc
            client-secret: abc
            scope:
              - email
              - profile
          kakao:
            client-name: Kakao
            client-id: 23cc7564b5c5007c60f5088a24f32fbe
            client-secret: UsaYUJvlEy5yNfOMKNrgXbbes6WCYfod
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
              - profile_image
            # baseUrl: 서버가 돌아가고 있는 host 주소값
            # action: login
            # registrationId: kakao
            # 결과: (만약 localhost:8080으로 동작 중이면)
            #       http://localhost8080/login/oauth2/code/kakao
          naver:
            client-name: Naver
            client-id: k7L3R4HdmuHmqYCldZDW
            client-secret: TY8EYMdwKs
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - name
              - email
              - profile_image
              - nickname